<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Wickerbox</title>
		<description>Adventures of an aerospace geek in Portland, Oregon.</description>
		<link></link>
		<atom:link href="feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Cape Lookout</title>
				<description>&lt;p&gt;I took the Nestucca Byway out of Carlton to Beaver to 101. Saw eagle and deer and lots of anglers.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-2hTAeNo01ZY/UzMdOhiqs2I/AAAAAAAAGWo/GqwaA3QkKNM/w873-h295-no/IMG_1090.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-TzZIxIHNkv4/UzMdOqhs9EI/AAAAAAAAGW4/MWT55-YtxDA/w873-h599-no/IMG_1092.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-YFDT5K_zrKk/UzMdOjarf9I/AAAAAAAAGWw/YpUIFz8eaYo/w873-h302-no/IMG_1093.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-QWm6ogIFz1s/UzMdPs288kI/AAAAAAAAGXA/CSC71YeVpPI/w873-h268-no/IMG_1095.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-1tnAhWfcQrc/UzMdP53bYcI/AAAAAAAAGXY/lZdUX7HVfT0/w873-h655-no/IMG_1100.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ifFAjDr6kMc/UzMdQG3bZ9I/AAAAAAAAGXE/WsZZpBRxUHM/w873-h521-no/IMG_1110.png&quot;&gt;
&lt;p&gt;Hike to the point at Cape Lookout.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-6iSHASZWjAQ/UzMdQY_zbPI/AAAAAAAAGXQ/1Jw4qo0DOUA/w491-h655-no/IMG_1117.png&quot;&gt;
&lt;p&gt;Spent a while watching surfers down below.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-lF8s4-KJ3UI/UzMdSK8yMJI/AAAAAAAAGXg/VlxLFpVDFyw/w873-h655-no/IMG_1128.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-B27xs9uI0ro/UzMdSFZahBI/AAAAAAAAGXo/LrLzRnhBrNk/w873-h655-no/IMG_1133.png&quot;&gt;
&lt;p&gt;Plenty of people were hanging out. There were a couple groups of gray whales passing by, one of which hung out for a while, probably feeding.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-sKZu0bLg21g/UzMeFPDB6jI/AAAAAAAAGYE/_T03t3SHJmo/w873-h655-no/IMG_1136.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-6ow-RXKQUHQ/UzMeGKyYVmI/AAAAAAAAGYU/x4pMwh-UZL8/w873-h193-no/IMG_1138.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-20bk5NMxsr4/UzMeGLKXyRI/AAAAAAAAGYc/bfAQjyy0wuI/w873-h654-no/IMG_1144.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-3Tlsd0BSHek/UzMeF6OwMaI/AAAAAAAAGYY/2phAjlZ6DwQ/w873-h499-no/IMG_1145.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-OWqPc-oMDQU/UzMeGwyx-fI/AAAAAAAAGYw/o2gY8I0mIcE/w873-h655-no/IMG_1151.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-yw-E6Gqyqsw/UzMeHMjhXsI/AAAAAAAAGYs/c5Dfvbnkrtk/w873-h655-no/IMG_1152.png&quot;&gt;
&lt;p&gt;I headed home via Tillamook but stopped for a minute at the viewpoint south of town.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-KnS4E-6dQeA/UzMeH4tzGcI/AAAAAAAAGY4/E9yYQ7JVMXY/w873-h655-no/IMG_1155.png&quot;&gt;</description>
				<pubDate>Sun, 23 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/cape-lookout</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/cape-lookout</guid>
			</item>
		
			<item>
				<title>Building Raised Beds</title>
				<description>&lt;p&gt;Getting started with the garden this year. Last year I did all right with veggies but they were in the ground and it could have been better. Also, I have the smallest backyard ever.&lt;/p&gt;
&lt;p&gt;There are three 3&amp;#8242;&amp;#215;6&amp;#8242; beds about 20&amp;quot; high. I used cedar fence boards and pine studs, then coated them with linseed oil. Total cost was about $100 and one day&amp;#8217;s work.&lt;/p&gt;
&lt;img src=&quot;/images/project/raisedbeds/setup.png&quot;&gt;
&lt;img src=&quot;/images/project/raisedbeds/second-box.png&quot;&gt;
&lt;img src=&quot;/images/project/raisedbeds/left-finish.png&quot;&gt;
&lt;img src=&quot;/images/project/raisedbeds/right-finish.png&quot;&gt;
&lt;img src=&quot;/images/project/raisedbeds/cropped-pano.png&quot;&gt;</description>
				<pubDate>Sun, 16 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/raised-beds</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/raised-beds</guid>
			</item>
		
			<item>
				<title>Image Convolution in C</title>
				<description>&lt;h5&gt;Introduction&lt;/h5&gt;
&lt;p&gt;This project performs pixel-by-pixel convolution on a 2-dimensional image of height and width less than 900 pixels. I wanted to really grok convolution and I wanted a program I could run on the command line with a script so I could compare different kernel matrices.&lt;/p&gt;
&lt;p&gt;Apart from the convolution program itself, I wrote a small helper program called GetPixels that uses OpenCV to turn an image into a text file of grayscale pixel values and vice versa.&lt;/p&gt;
&lt;p&gt;This project follows from my previous &lt;a href=&quot;#&quot;&gt;SystemVerilog&lt;/a&gt; implementation but I lack access to a decent SysV simulator and felt C would work just fine.&lt;/p&gt;
&lt;p&gt;The code is available at &lt;a href=&quot;http://github.com/wicker/image-processing/&quot;&gt;my GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;/images/project/convolution/c-introimg.png&quot;&gt;
&lt;h5&gt;GetPixels&lt;/h5&gt;
&lt;p&gt;First of all, the convolution program takes a text file of 8-bit grayscale pixel values with values between 0 (black) and 255 (white). GetPixels is a small OpenCV-based tool to turn a gray or color image into a text file of pixel values and back again. Check out &lt;a href=&quot;/2014/03/getpixels/&quot;&gt;the full GetPixels instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, GetPixels takes an input &lt;span class=&quot;caps&quot;&gt;PNG&lt;/span&gt; and outputs a text file with the grayscale value of the pixels separated by a space, like this:&lt;/p&gt;
&lt;p&gt;164 165 165 165 165 164 165 165 165 164 165 166&lt;/p&gt;
&lt;p&gt;At the end, once you&amp;#8217;ve performed convolution with your kernel, GetPixels can take the modified input text file with grayscale pixel values separated by spaces and returns an output image.&lt;/p&gt;
&lt;p&gt;Usage: &lt;code&gt;./GetPixels.o &amp;lt;operation&amp;gt; &amp;lt;input file&amp;gt; &amp;lt;output file&amp;gt; &amp;lt;width&amp;gt; &amp;lt;height&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;operation&amp;gt; is 1 for image -&amp;gt; text file or 2 for text file -&amp;gt; image&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;image file&amp;gt; is the relative path name to an image file&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;pixel file&amp;gt; is the relative path name to a text file of pixels&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;width&amp;gt; is the width of the image in pixels&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;height&amp;gt; is the height of the image in pixels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get a text file of the pixels of a 800&amp;#215;600 mountain.png, try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o 1 mountain.png pixels.txt 800 600&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To reconstruct an image from that pixel file, try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o 2 mountainReconstructed.png pixels.txt 240 320&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: if you don&amp;#8217;t change the pixel values by convolution or other way, then mountain.png and mountainReconstructed.png should be identical. It&amp;#8217;s a good way to check that the program works.&lt;/p&gt;
&lt;h5&gt;Convolution&lt;/h5&gt;
&lt;p&gt;The convolution program works by shoving an image&amp;#8217;s pixel values into an array and iterating over them with a convolution kernel matrix. The program takes arguments to specify input and output file names along with the number of kernels (1 or 2), kernel size (odd numbers between 1 and 17), and kernel coefficients (integers).&lt;/p&gt;
&lt;p&gt;Usage:  ./main.o &lt;input.txt&gt; &lt;width&gt; &lt;height&gt; &lt;op&gt; &lt;kernel&gt; &lt;norm&gt; &lt;output.txt&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;input.txt&lt;/code&gt; is the text file containing grayscale image pixel values.  &lt;br /&gt;
&lt;code&gt;width&lt;/code&gt; in pixels, same as number of columns in image.  &lt;br /&gt;
&lt;code&gt;height&lt;/code&gt; in pixels, same as number of rows in image.  &lt;br /&gt;
&lt;code&gt;op&lt;/code&gt; is (1) a horizontal 1d, (2) a vertical 1d, or (3) custom kernel to be entered by the user.  &lt;br /&gt;
&lt;code&gt;kernel&lt;/code&gt; is the N in the NxN kernel matrix that must be an odd number between 1 and 17.  &lt;br /&gt;
&lt;code&gt;norm&lt;/code&gt; is (0) no or (1) yes to normalize (divide by number of coefficients) the image.  &lt;br /&gt;
&lt;code&gt;output.txt&lt;/code&gt; is the text file to store resulting grayscale image pixel values.&lt;/p&gt;
&lt;p&gt;To perform a custom 2D operation on a 240&amp;#215;320 image with a 5&amp;#215;5 filter kernel that will be normalized:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./main.o input.txt 240 320 3 5 1 output.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To perform a 1D horizontal operation on the same 240&amp;#215;320 image with a 3&amp;#215;3 filter kernel that will not be normalized:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./main.o input.txt 240 320 1 3 0 output.txt&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Scripting Example&lt;/h5&gt;
&lt;p&gt;I put the following in a script to run a bunch of kernels all in a row. I used the same input image (brokentop.txt) but saved the outputs to their own files so I could reconstruct them with GetPixels at the end. The image is a portrait size of 240&amp;#215;320. I chose to do a single custom 3&amp;#215;3 operation and none of them are to be normalized.&lt;/p&gt;
&lt;p&gt;First, I turned the brokentop.png image into a text file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o 1 brokentop.png brokentop.txt 240 320&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then I performed the operations, creating six output text files with the results.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-horz.txt&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-sobel-h.txt &lt;/code&gt; &lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-vert.txt&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-sobel-v.txt&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-45deg.txt&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 3 3 0 output-135deg.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, I reconstructed images from the output files so I could look at them in an image viewer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o 2 output-horz.png output-horz.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 output-sobel-h.png output-sobel-h.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 output-vert.png output-vert.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 output-sobel-v.png output-sobel-v.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 output-45deg.png output-45deg.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 output-135deg.png output-135deg.txt 240 320&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For each operation, the program prompted me to enter the coefficients from left to right by hand but I have a couple options for how to enter them. Using the kernel for a Sobel horizontal operator, I can enter the coefficients all on one line like this,&lt;/p&gt;
&lt;p&gt;&lt;code&gt; +1 +2 +1 0 0 0 -1 -2 -1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or I can enter them by lines like this,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+1 +2 +1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;0 0 0 &lt;/code&gt;&lt;br /&gt;
&lt;code&gt;-1 -2 -1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which can be easier to read. Finally, I can enter them all like this,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+1&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;+2  &lt;/code&gt; &lt;br /&gt;
&lt;code&gt;+1&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;0&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;0&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;0&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;-1&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;-2&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;so it really doesn&amp;#8217;t matter. I ended up writing them in the second form in a text file and copying/pasting. That way the test is built before I start and the results come out without needing editing.&lt;/p&gt;
&lt;p&gt;The image on the left is the original brokentop.png. The image on the right is what it&amp;#8217;s turned into by GetPixels when the text file brokentop.txt is created.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Original image&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/brokentop.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;GetPixels result&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/results-delta.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;p&gt;The script lets you quickly do things like compare the six operations above when normalized (flag set to &amp;#8216;1&amp;#8217;) and not normalized (flag set to &amp;#8216;0&amp;#8217;). Here are the results of the convolution operations when they are not normalized. They&amp;#8217;re still very high noise, because the only filtering was high pass, which is effectively trying to find every edge in the image.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Horizontal Filter&lt;br /&gt;
-1 -1 -1 &lt;br /&gt;
2 2 2&lt;br /&gt;
-1 -1 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-horz.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Sobel Horizontal Filter&lt;br /&gt;
-1 -2 -1&lt;br /&gt;
0 0 0 &lt;br /&gt;
1 2 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-sobel-h.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Vertical Filter&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-vert.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Sobel Vertical Filter&lt;br /&gt;
-1 0 1 &lt;br /&gt;
-2 0 2&lt;br /&gt;
-1 0 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-sobel-v.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;45 Degrees&lt;br /&gt;
-1 -1 2&lt;br /&gt;
-1 2 -1&lt;br /&gt;
2 -1 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-45deg.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;135 Degrees&lt;br /&gt;
2 -1 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 -1 2&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/not-normed/output-135deg.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;p&gt;Normalizing, on the other hand, provides a low pass effect and helps to smooth out the resulting image. These images were normalized after the filter. I ran the script in a fresh directory but passed a &amp;#8216;1&amp;#8217; to the &lt;code&gt;&amp;lt;norm&amp;gt;&lt;/code&gt; flag instead of a 0. You can tell these are much more useful images.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Horizontal Filter&lt;br /&gt;
-1 -1 -1 &lt;br /&gt;
2 2 2&lt;br /&gt;
-1 -1 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-horz.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Sobel Horizontal Filter&lt;br /&gt;
-1 -2 -1&lt;br /&gt;
0 0 0 &lt;br /&gt;
1 2 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-sobel-h.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Vertical Filter&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-vert.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Sobel Vertical Filter&lt;br /&gt;
-1 0 1 &lt;br /&gt;
-2 0 2&lt;br /&gt;
-1 0 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-sobel-v.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;45 Degrees&lt;br /&gt;
-1 -1 2&lt;br /&gt;
-1 2 -1&lt;br /&gt;
2 -1 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-45deg.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;135 Degrees&lt;br /&gt;
2 -1 -1&lt;br /&gt;
-1 2 -1&lt;br /&gt;
-1 -1 2&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/normed/output-135deg.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;h5&gt;How Convolution Works&lt;/h5&gt;
&lt;p&gt;Pixel by pixel, the kernel matrix is placed with the pixel of interest in the center. Each coefficient in the matrix is multiplied by the neighboring pixel it covers. The values are then added up and may or may not normalized.&lt;/p&gt;
&lt;p&gt;Choose the kernel matrix wisely! Kernel matrices are the discrete version of a continuous filtering function and you can develop your own or adapt the common ones.&lt;/p&gt;
&lt;p&gt;In edge cases where the some of the coefficients in the kernel matrix fall off the edge of the image and don&amp;#8217;t have corresponding pixels to multiply against, this program tracks how many coefficients weren&amp;#8217;t used and only adds and/or calculates an average for the ones which were. There is no wrapping, mirroring, or other border tricks. The pixels are just ignored.&lt;/p&gt;
&lt;p&gt;The program also checks if a value is greater than 255 or less than zero, and bounds the value accordingly.&lt;/p&gt;
&lt;h5&gt;Delta Function&lt;/h5&gt;
&lt;p&gt;To produce a control image for each set run, use a delta function. The delta function multiplies all the other pixels by zero so the only value to be output is the pixel itself. Obviously, a delta function should not be normalized.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Original image&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/brokentop.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Delta function&lt;br /&gt;
0 0 0&lt;br /&gt;
0 1 0 &lt;br /&gt;
0 0 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/results-delta.png&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;h5&gt;Common Kernels &amp;#8211; Rabbit Example&lt;/h5&gt;
&lt;p&gt;This is a set of examples showing high and low pass kernels from &lt;a href=&quot;http://en.wikipedia.org/wiki/Kernel_%28image_processing%29&quot;&gt;the Wikipedia image processing kernel page&lt;/a&gt; on a Wikipedia Creative Commons-licensed rabbit image.&lt;/p&gt;
&lt;p&gt;The delta image is the original image in grayscale.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Delta&lt;br /&gt;
0 0 0&lt;br /&gt;
0 1 0 &lt;br /&gt;
0 0 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/rabbit-kernel-delta.png&quot;&gt;&lt;/div&gt;
&lt;h5&gt;Rabbit Example &amp;#8211; Low Pass Filters&lt;/h5&gt;
&lt;p&gt;Low pass filters like a blur are generally normalized. The most common is a Gaussian distribution, which these are not. To get more of a blur, just enlarge the kernel.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Blur #1 (Normalized)&lt;br /&gt;
1 2 1 &lt;br /&gt;
2 4 2&lt;br /&gt;
1 2 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/output-blur1.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Blur #2 (Normalized)&lt;br /&gt;
1 1 1 &lt;br /&gt;
1 1 1 &lt;br /&gt;
1 1 1 &lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/output-blur2.png&quot;&gt;&lt;/div&gt;
&lt;h5&gt;Rabbit Example &amp;#8211; High Pass Filters&lt;/h5&gt;
&lt;p&gt;High Pass filters are used for edge enhancement, edge detection, embossing, sharpening, or any operation where you want to bring attention to the difference between two pixels. The sharpen operation below is not normalized; the others are.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Sharpen&lt;br /&gt;
0 -1 0 &lt;br /&gt;
-1 5 -1&lt;br /&gt;
0 -1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/sharpen.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge #1&lt;br /&gt;
1 0 -1&lt;br /&gt;
0 0 0 &lt;br /&gt;
-1 0 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/rabbit-kernel-edge1.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge #2&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -4 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/rabbit-kernel-edge2.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge #3&lt;br /&gt;
-1 -1 -1 &lt;br /&gt;
-1 8 -1 &lt;br /&gt;
-1 -1 -1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/rabbit-kernel-edge3.png&quot;&gt;&lt;/div&gt;
&lt;h5&gt;Kernel Sum (Brightness)&lt;/h5&gt;
&lt;p&gt;There are three things &amp;#8211; luminance (brightness), hue, and saturation. We&amp;#8217;re working with grayscale values so we ignore hue and saturation. We&amp;#8217;re left with an 8-bit brightness value. That means that if the sum of our kernel is greater than one, we&amp;#8217;re going to get pixel values at greater than we started with, which is a brighter image. If the kernel is less than one, we&amp;#8217;ll get a darker image.&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = -2)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -6 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-m2.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = -1)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -5 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-m1.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = 0)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -4 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-0.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = 1)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -3 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-p1.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = 2)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -2 1 &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-p2.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;Edge (Sum = 3)&lt;br /&gt;
0 1 0 &lt;br /&gt;
1 -1 1  &lt;br /&gt;
0 1 0&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/laplace-pos/output-sum-p3.png&quot;&gt;&lt;/div&gt;
&lt;h5&gt;1D Examples&lt;/h5&gt;
&lt;p&gt;These two images just have the 1-dimensional horizontal matrix specified. The left image is a blur and the right is a 3&amp;#215;3 edge.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o 1 brokentop.png brokentop.txt&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 1 9 1 1d-blur.txt&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./main.o brokentop.txt 240 320 1 3 1 1d-edge.txt&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 1d-blur.png 1d-blur.txt 240 320&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./GetPixels.o 2 1d-edge.png 1d-edge.txt 240 320&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;convolution&quot;&gt;9&amp;#215;9 Blur (Normalized)&lt;br /&gt;
1 1 1 1 1 1 1 1 1 &lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/1d-blur.png&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;convolution&quot;&gt;3&amp;#215;3 Edge (Normalized)&lt;br /&gt;
-1 0 1&lt;br /&gt;
&lt;img src=&quot;/images/project/convolution/results/1d-edge.png&quot;&gt;&lt;/div&gt;</description>
				<pubDate>Sat, 15 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/convolution-in-c</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/convolution-in-c</guid>
			</item>
		
			<item>
				<title>GetPixels</title>
				<description>&lt;img src=&quot;/images/project/convolution/getpixels.png&quot;&gt;
&lt;p&gt;GetPixels converts an image to a text file of grayscale pixel values and reconstructs the image. I wrote it so I could manipulate the value of an image&amp;#8217;s pixels using convolution kernels and easily look at the results.&lt;/p&gt;
&lt;p&gt;Find the code at &lt;a href=&quot;http://github.com/wicker/getpixels&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GetPixels is open source software licensed under the &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike International&lt;/a&gt; license. That means you can share and adapt the work for any purpose as long as you give me credit and share your work alike.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./GetPixels.o &amp;lt;op&amp;gt; &amp;lt;image.png&amp;gt; &amp;lt;pixels.txt&amp;gt; &amp;lt;width&amp;gt; &amp;lt;height&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; is the desired operation. Use &amp;#8216;1&amp;#8217; for image&amp;#8594;pixels and &amp;#8216;2&amp;#8217; for pixels&amp;#8594;image.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;image.png&lt;/code&gt; is the relative file path to the image and &lt;code&gt;pixels.txt&lt;/code&gt; is the text file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; are the values in pixels of the image.&lt;/p&gt;
&lt;h3&gt;Build&lt;/h3&gt;
&lt;p&gt;I used OpenCV 2.4.8 and g++ to compile on Linux Mint 15 (Olivia).&lt;/p&gt;
&lt;h3&gt;Failure Cases&lt;/h3&gt;
&lt;p&gt;The program will alert you if the height or width is less than 1, if the input image or input pixel file don&amp;#8217;t exist, or if the operation chosen is not 1 or 2.&lt;/p&gt;
&lt;p&gt;Note: The output files will be created and overwrite any existing files without prompting!&lt;/p&gt;
&lt;p&gt;If you give the program a portrait of dimensions 240&amp;#215;320 but you tell the program it&amp;#8217;s a landscape of dimensions 320&amp;#215;240, you&amp;#8217;ll get a broken reconstruction:&lt;/p&gt;
&lt;img src=&quot;/images/project/convolution/landscape.png&quot;&gt;</description>
				<pubDate>Mon, 10 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/getpixels</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/getpixels</guid>
			</item>
		
			<item>
				<title>Strain Gauge Amplifier Board v1</title>
				<description>&lt;p&gt;Made in collaboration with Andrew Greenberg, who is awesome.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: the schematic below is wrong in that the &lt;span class=&quot;caps&quot;&gt;FET&lt;/span&gt; is backwards. The board is wrong in that the IC footprint is the wrong width. Verify both for yourself if you use the design!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The quarter-bridge design uses the strain gauges as one of the four resistors in a Wheatstone bridge, references the bridge to 2.5V, and runs the output of the bridge through an INA125 Instrumentation Op-Amp IC which actually has three op amps in it. We&amp;#8217;re using Euroterminals for the strain gauge input and the sense signal outputs.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/pcdcpBJTOS9orbW-b-UthrrfCHo7wxRd7bw91--ptA=w1022-h627-no&quot;&gt;
&lt;p&gt;This is a non-intuitive approach but bear with me. Everything on the board except the purple reversed lettering is on the top side of the board. The reversed purple lettering is on the bottom. I made the boards on the &lt;span class=&quot;caps&quot;&gt;LPKF&lt;/span&gt; router that doesn&amp;#8217;t actually make two sides of a hole connect electrically &amp;#8230; so we&amp;#8217;re soldering all the components, including the legs of the connectors, on the top side. The connectors are actually accessible on the bottom side. Just their pins are sticking through to the top layer.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll turn the top side towards the bamboo carrier and use washers to make space so the components aren&amp;#8217;t touching the bamboo.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-vig-wAqcexM/Uxzkz2jrWKI/AAAAAAAAGUk/7HY84ylSMB0/w694-h557-no/B-board.png&quot;&gt;
&lt;p&gt;Using a laser cutter to make the bamboo carrier boards.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-jxNoSg2JDU0/Uxzk0sWf7yI/AAAAAAAAGUs/ieOmJ7MriWg/w655-h491-no/C.png&quot;&gt;
&lt;p&gt;Our &lt;span class=&quot;caps&quot;&gt;PCB&lt;/span&gt; router. Alas, no time lapse.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-KHFipRPrkLc/Uxzk1wQO4RI/AAAAAAAAGU4/Wb4PHqvnLXM/w655-h491-no/D.png&quot;&gt;
&lt;p&gt;This is the top side of the board.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-DkIvQxC6YGg/Uxzk1wQ2TWI/AAAAAAAAGU8/6jYPbQyGs_E/w764-h413-no/E.png&quot;&gt;
&lt;p&gt;And the bottom side.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-FCzkG7s02ug/Uxzk2ZKOvlI/AAAAAAAAGVE/7A6P27Hd2Eg/w764-h369-no/F.png&quot;&gt;
&lt;p&gt;What it&amp;#8217;ll look like.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-fu1c-1Ga-Ak/Uxzk4KLJHjI/AAAAAAAAGVU/IzbgZR9EksI/w764-h461-no/G.png&quot;&gt;
&lt;p&gt;All ten boards, ten carrier boards, and the parchment stencil.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-fTQEHqwPUYw/Uxzk3ulJQaI/AAAAAAAAGVQ/MGKQaDK_GxQ/w764-h437-no/H.png&quot;&gt;
&lt;p&gt;I was out of town for the stress tests but the team took a ton of photos.&lt;/p&gt;
&lt;img src=&quot;/images/project/straingauge/gaugeinuse.png&quot;&gt;</description>
				<pubDate>Sun, 09 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/strain-gauge-interconnect-board</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/strain-gauge-interconnect-board</guid>
			</item>
		
			<item>
				<title>Carbon Fiber Airframe Layup</title>
				<description>&lt;p&gt;An ME capstone team has built the Portland State Aerospace Society a curing oven and will be giving us an example airframe and developing a process for us to build lots more on our own. It&amp;#8217;s epic and will let us make more rockets and, more importantly, make interchangeable rocket modules.&lt;/p&gt;
&lt;p&gt;Sam and Robert machine the module end rings.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/--vEKylhTCr8/UxzdYbpqfrI/AAAAAAAAGSs/eeQI4S9xxGE/w655-h491-no/A.png&quot;&gt;
&lt;p&gt;Jack and Barett prep the rings.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-7RJG1P8KL8w/UxzdY7q54fI/AAAAAAAAGS0/p6Uzi23VH34/w491-h655-no/B.png&quot;&gt;
&lt;p&gt;Tung&amp;#8217;s cleaning and applying &lt;s&gt;wax&lt;/s&gt; liquid hybrid mold release to the cylindrical molds.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-_xjnsnRRzoA/UxzdYm09qlI/AAAAAAAAGSw/8wYd4PqhtL8/w491-h655-no/C.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-FF1yV9TBMy0/UxzdaMfzhqI/AAAAAAAAGS8/BgV_LB5nz-8/w655-h491-no/D.png&quot;&gt;
&lt;p&gt;Not sure we have the hang of core seams yet&amp;#8230;&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-aObbJmU8qms/UxzdbKMQfJI/AAAAAAAAGTE/YW2jFK6ASLs/w655-h491-no/E.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-1Eka_Xl4fNs/Uxzdb5kNnyI/AAAAAAAAGTM/vs7byBvczp4/w655-h491-no/F.png&quot;&gt;
&lt;p&gt;The mold is waxed and then, in order, we place adhesive, the inside layer of carbon fiber, adhesive, the core, adhesive, the outer layer of carbon fiber, and shrink tape.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-NWeCUJmco_8/UxzdcFGnnQI/AAAAAAAAGTg/5rB6X4CKVZU/w655-h491-no/G.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-VJ7vjQzuwls/Uxzdcg5v_1I/AAAAAAAAGTY/95yqO736PoU/w655-h491-no/H.png&quot;&gt;
&lt;p&gt;It&amp;#8217;s pretty cool to see our oven control shield at work. The hacked Ethernet cables connect MAX31855 thermocouple-to-digital ICs over &lt;span class=&quot;caps&quot;&gt;SPI&lt;/span&gt; so in v3 we&amp;#8217;re definitely putting the ICs on the board, super close to the controller, and buying longer thermocouples to run to the oven.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-P-nseB4dS4Y/UxzddPMySEI/AAAAAAAAGTk/LwZbcyJE3lU/w655-h491-no/I.png&quot;&gt;
&lt;p&gt;Ready to bake at 350F for three hours.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-068nShS7ED8/Uxzdedzf-_I/AAAAAAAAGTs/DI_1E48wG5E/w491-h655-no/J.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-M0alTM-36_U/UxzdfNArAHI/AAAAAAAAGT0/v1Q4LrZBiHI/w491-h655-no/K.png&quot;&gt;</description>
				<pubDate>Fri, 07 Mar 2014</pubDate>
				<link>http://www.wickerbox.net//2014/03/carbon-fiber-rocket-layup</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/03/carbon-fiber-rocket-layup</guid>
			</item>
		
			<item>
				<title>Snow at the Tualatin Refuge</title>
				<description>&lt;img src=&quot;https://lh4.googleusercontent.com/-VWclenepfnM/Uv7TyGn0iZI/AAAAAAAAGOM/66RppMq0lT8/w604-h275-no/DSCF2281.png&quot;&gt;
&lt;p&gt;Just the other night, the wetland was covered in geese; now it&amp;#8217;s ice and slush.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ruOVnpaOcRY/Uv7TwnSlMkI/AAAAAAAAGN8/fU_ElHesVRI/w604-h403-no/DSCF2257.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-gh_NMHBhMvM/Uv7TxvtUfoI/AAAAAAAAGOI/eEe9sQkzjo8/w604-h403-no/DSCF2260.png&quot;&gt;
&lt;p&gt;The oak study area under snow.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-BDfgzmR70mE/Uv7TbSANr-I/AAAAAAAAGL8/8mjwhDntHGU/w604-h403-no/DSCF2122.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-dlnzpU4Q8-c/Uv7TaNMtRFI/AAAAAAAAGL4/D0OPhdgEdOg/w543-h813-no/DSCF2150.png&quot;&gt;
&lt;p&gt;The human-sized &amp;#8220;eagle&amp;#8221; nest they built back in summer is holding up nicely.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-YEtjcbS_T3Y/Uv7TcLCuNHI/AAAAAAAAGMI/-Rgro95D-XE/w604-h403-no/DSCF2151.png&quot;&gt;
&lt;p&gt;Continuing on through the Rock Creek study area and along the edge of the open wetland.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-Zl-hj_9jC40/Uv7TggpbnBI/AAAAAAAAGMY/t9l0wKtvl5s/w604-h403-no/DSCF2170.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-xfy3oxbzvmI/Uv7ThasHCXI/AAAAAAAAGMg/012pxIKEIF4/w604-h403-no/DSCF2197.png&quot;&gt;
&lt;p&gt;Lots of little birds foraging, geese passing overhead, and a hawk keeping an eye out.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-RAc6VFI6orw/Uv7Te0aVtiI/AAAAAAAAGMQ/SP2pP3pkJQY/w604-h453-no/DSCF2193.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-LAwxjgy6954/Uv7TrpySdRI/AAAAAAAAGNM/QAvvkGZ5XJs/w604-h328-no/DSCF2239.png&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-dFyBjZcqV2w/Uv7Tt5EfqfI/AAAAAAAAGNk/5nwVbIjlSko/w604-h453-no/DSCF2245.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-99m-WTEeFHM/Uv7TtHyfL7I/AAAAAAAAGNc/UQPgLPRMRHk/w604-h453-no/DSCF2246.png&quot;&gt;
&lt;p&gt;There&amp;#8217;s a viewing platform over the Tualatin River.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-Hd0UTuwmzQ0/Uv7TjTB8R1I/AAAAAAAAGMo/VDA1Xx_o8_I/w604-h403-no/DSCF2205.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-FySUUa5ANpE/Uv7Tmb5Vc9I/AAAAAAAAGMw/sXiGPWVjK0Y/w604-h403-no/DSCF2208.png&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-9pV41nFt0eo/Uv7TpozXGwI/AAAAAAAAGNE/nYLxjpgbJQY/w604-h403-no/DSCF2212.png&quot;&gt;
&lt;p&gt;Following the creek around to the wetland. I spent a lot of time playing with lighting. Still not sure I have it.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-aUoL70olyn4/Uv7TspyCE9I/AAAAAAAAGNY/PWNZh95AIbk/w604-h403-no/DSCF2232.png&quot;&gt;
&lt;p&gt;I think the shapes made by leafless trees are great. Dendrophotography?&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-jGrryQB2cMg/Uv7X7KopQeI/AAAAAAAAGPI/JbFEuMDD_o4/w604-h403-no/series1.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-be53Pi3GYso/Uv7X6xuNK3I/AAAAAAAAGPE/hFOZwuJIJCI/w604-h403-no/series2.png&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-ioWblz-pqsk/Uv7X640OheI/AAAAAAAAGPA/1fOErbwwkIc/w604-h403-no/series3.png&quot;&gt;</description>
				<pubDate>Wed, 12 Feb 2014</pubDate>
				<link>http://www.wickerbox.net//2014/02/tualatin-wildlife-refuge-snow</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/02/tualatin-wildlife-refuge-snow</guid>
			</item>
		
			<item>
				<title>124km DxWifi Flight Test</title>
				<description>&lt;p&gt;The antenna setup in the back of the plane. We were all about all these different ways to attach the antenna, internally and externally, but it turned out taping it in the back window was good enough.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-5ysw4i0ULtE/UvfKknq5SNI/AAAAAAAAGDU/EZlqiiVixgk/w960-h720-no/IMG_0695.png&quot;&gt;
&lt;p&gt;Taxiing out and taking off at Troutdale.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-TvOelSrx3Bg/UvfKkrLZsSI/AAAAAAAAGDQ/otPMXWC3tvA/w960-h720-no/IMG_0700.png&quot;&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-EhEK-vaTiTw/UvfKkt983qI/AAAAAAAAGDM/D4uOwlBy11E/w960-h720-no/IMG_0701.png&quot;&gt;
&lt;p&gt;Looking northeast towards Camas.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-9K4RJKWAsMA/UvfKlIslUPI/AAAAAAAAGDk/Kq0KJXY4hco/w960-h720-no/IMG_0713.png&quot;&gt;
&lt;p&gt;Our most excellent pilot.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-XXMKWeMlvz8/UvfKl35USSI/AAAAAAAAGDo/PDwkTMZM_a4/w584-h779-no/IMG_0720.png&quot;&gt;
&lt;p&gt;Our most excellent antenna operator.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-H8gL8t45hAI/UvfKn5PxdcI/AAAAAAAAGEY/w2X-53i6GXQ/w584-h779-no/IMG_0811.png&quot;&gt;
&lt;p&gt;We did a few circles on the Washington side of the river to give the Rocky Butte ground team a chance to get up and running ot see if they could catch our packets. We had no idea if we were going to even be able to make contact.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-TWw3iw3wTw0/UvfKl4TmjII/AAAAAAAAGDs/ZXNSpQmkGIw/w960-h720-no/IMG_0740.png&quot;&gt;
&lt;p&gt;But we did! And we headed north to the west of Mt St Helens.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-IgMO3tpdHF8/UvfKmQ4acTI/AAAAAAAAGD8/xp6eJzMWNLI/w960-h720-no/IMG_0752.png&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-wCzieLTOorE/UvfKm1UKqZI/AAAAAAAAGEA/BfhKxDCIZ7A/w960-h720-no/IMG_0766.png&quot;&gt;
&lt;p&gt;We warned the ground team we might lose them for a minute or two and we took a detour to check out the caldera.&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-qCLxoDYDQ7g/UvfKnTtyZKI/AAAAAAAAGEQ/0kqWHl11R_Q/w960-h720-no/IMG_0795.png&quot;&gt;
&lt;p&gt;We ended up spending a lot of time circling over Morton, WA, but that was about where our signal problems started. We did continue on to Kapowsin Field, right at the edge of Seattle airspace, at about 10,000 feet.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-y7iYSimB4NY/UvfKnz2HcKI/AAAAAAAAGEo/H6QS5U1nFdc/w584-h779-no/IMG_0815.png&quot;&gt;
&lt;p&gt;On the way back south, we moved the antenna to the front right window but we couldn&amp;#8217;t shake the communication problems. We lost both &lt;span class=&quot;caps&quot;&gt;SMS&lt;/span&gt; and radio to Rocky Butte so when we turned around the ground team wasn&amp;#8217;t entirely sure where we were and we weren&amp;#8217;t ever really able to re-establish contact. The antennas have a very narrow beam over which they can receive so if we had to be exactly where the Rocky Butte team was pointing their antenna, and for the most part we weren&amp;#8217;t.&lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-JqMbAWpz4ck/UvfKocwxLSI/AAAAAAAAGE8/5Er-tvBSiic/w960-h720-no/IMG_0818.png&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-oyad-ftFdIY/UvfKpI0gsqI/AAAAAAAAGE0/nJYt0cSIObk/w960-h720-no/IMG_0819.png&quot;&gt;
&lt;p&gt;We were also considering fuel/range issues and ended up deciding to just head back to Troutdale and call it a win.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-9EGjJdCLPx4/UvfKpJkaTNI/AAAAAAAAGE4/n_1UcIJfmb0/w584-h779-no/IMG_0823.png&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-U-CKkvMcVsY/UvfKpe4KU7I/AAAAAAAAGFc/QwvtFun61BQ/w960-h720-no/IMG_0825.png&quot;&gt;
&lt;p&gt;On final to Troutdale, with bonus propellers. (It&amp;#8217;s actually not really possible with iPhone to take a picture out the front window that doesn&amp;#8217;t catch the prop.)&lt;/p&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-6gzbq8Unn0k/UvfKp3YuweI/AAAAAAAAGFQ/i3HFJIdGmZA/w584-h779-no/IMG_0855.png&quot;&gt;
&lt;p&gt;Our pilot puts the plane away.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-jdvjvgNlObc/UvfKp73yVsI/AAAAAAAAGFY/JhFT5Qlu220/w960-h720-no/IMG_0864.png&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-tIYwLUymAD4/UvfKqa66_BI/AAAAAAAAGFU/Or2x6u92gYs/w960-h720-no/IMG_0873.png&quot;&gt;</description>
				<pubDate>Sun, 02 Feb 2014</pubDate>
				<link>http://www.wickerbox.net//2014/02/dxwifi-124km-flight-test</link>
				<guid isPermaLink="true">http://www.wickerbox.net//2014/02/dxwifi-124km-flight-test</guid>
			</item>
		
	</channel>
</rss>
